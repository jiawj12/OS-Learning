进程的三态模型
1、运行
2、阻塞
3、就绪


抢占式和协同式调度
IO约束型和处理器约束型进程

Linux公平调度算法，Completely Fair Scheduler(CFS)
CFS给N个进程每个进程分配1/N的处理器时间
然后通过优先级和权值调整分配，默认优先级为0，权值为1
优先级值设置越小（优先级越高），则权值越大，分配比例也增加
为了确定每个进程真实的执行时间，引入目标延迟，目标延迟是调度的固定周期
为了避免因为目标延迟设置过小，导致每个进程运行的时间过短，引入最小粒度


网络编程
运输层：TCP/UDP
网络层：IP

socket() 创建套接字
int socket(int domain, int type, int protpcol)

netstat -alnt | grep 20001
ps -ef | grep girl
进入进程所在文件

select 和epoll的实现和API

select概述：
最大支持1024个fd，大小取决于操作系统支持；
1024个bitmap，先把需要监控的文件注册到bitmap中，这些文件的位为1，其他为0；
调用select，ready的文件的bit位仍为1，其他为0。

流程：
构建fd_set rfds，读文件描述符集合，还可以有写文件集合，错误文件集合
FD_ZERO(&rfds) 将rfds置零
FD_SET(fd_i, &rfds) 将fd_i加入到rfds中
select(maxfd + 1, &rfds, NULL, NULL, NULL) 调用select，等待rfds中的fd成为ready状态，select返回说明有fd ready了
FD_ISSET(fd_i, &rfds); 遍历所有rfds中的fd，如果fd_i仍为1，表面fd_i ready了

缺点：
1、bitmap有上限，2014
2、fd_set不可重用，每次要把fd_set置位，把fd注册到fd_set中
3、需要内核态、用户态切换
4、需要遍历rfds中的fd，O(n)复杂度

poll概述：
监控的fd存在fds数组中，pollfd结构体数组，events是输入参数，revents是输出参数，events和revents中bits的宏定义在<poll.h>
int poll(struct pollfd *fds, nfds_t nfds, int timeout);
struct pollfd {
int   fd;         /* file descriptor */
short events;     /* requested events */
short revents;    /* returned events */
};

流程：
构建一个pollfd数组，包含n个pollfd，每个pollfd中的fd是文件描述符，events是监听的事件类型
如果是读事件，pollfd[i].events = POLLIN
poll返回后，遍历每个pollfd，看里面的revents内容，用revents || POLLIN判断时间是否为真

缺点：
1、需要内核态、用户态切换
2、需要遍历pollfd中的fd，O(n)复杂度

epoll概述：
epoll_event结构体
typedef union epoll_data {
void    *ptr;
int      fd;
uint32_t u32;
uint64_t u64;
} epoll_data_t;
struct epoll_event {
uint32_t     events;    /* Epoll events */
epoll_data_t data;      /* User data variable */
};
文件描述符ev.data.fd，监控事件ev.events

流程：
epfd = epoll_create(10) 创建一个白板
构建监控事件的epoll_event ev，通过epoll_ctl把ev注册进epfd中
epoll_ctl(epfd, EPOLL_CTL_ADD, ev.data.fd, &ev) 
nfds = epoll_wait(epfd, events, 5, 10000) 把返回的事件存放在提前构建的数组events中
events前nfds存放ready的fd，通过events[i].data.fd
ready的epoll_event个数，从events[i].data.fd中读取数据

底层使用红黑树，不需要遍历fd
有内存映射，不需要内核态、用户态切换



